version: 2.1

executors:
  default-runner:
    docker:
      - image: ghcr.io/cryptogarageinc/elements-testing:v0.1.0
  macos-builder:
    macos:
      xcode: 11.3.0

tag_only: &tag_only
  filters:
    tags:
      only: /.*/
    branches:
      ignore: /.*/
workflows:
  lint-build-test-integration:
    jobs:
      - lint
      - build
      - test:
          requires:
            - build
      - integration:
          requires:
            - build
  prebuild-release:
    jobs:
      - prebuild:
          name: prebuild-linux
          runner: default-runner
          <<: *tag_only
      - release:
          <<: *tag_only
          requires:
            - prebuild-linux

jobs:
  lint:
    docker:
      - image: ghcr.io/cryptogarageinc/elements-testing:v0.1.0
    steps:
      - checkout
      - run: npm ci
      - run: npm run tslint_check

  build:
    docker:
      - image: ghcr.io/cryptogarageinc/elements-testing:v0.1.0
    steps:
      - checkout
      - run: npm ci
      - run: npm run cmake_all
      - persist_to_workspace:
          root: .
          paths:
            - .
  test:
    docker:
      - image: ghcr.io/cryptogarageinc/elements-testing:v0.1.0
    steps:
      - attach_workspace:
          at: .
      - run: npm run test_report
      - store_test_results:
          path: ./reports/jest
      - store_artifacts:
          path: ./reports/jest

  integration:
    docker:
      - image: ghcr.io/cryptogarageinc/elements-testing:v0.1.0
    steps:
      - attach_workspace:
          at: .
      - run: ./integration_tests/__tests__/start-bitcoind.sh $(pwd) 'integration_tests'
      - run: sleep 3
      - run: npm run test_integration
      - store_artifacts:
          path: ./build_coverage/lcov_cfddlc_output
          destination: raw-test-output
      - store_test_results:
          path: ./reports/integration
      - store_artifacts:
          path: ./reports/integration

  prebuild:
    parameters:
      runner:
        type: executor
      setup:
        description: "Steps that will run before prebuild the app"
        type: steps
        default: []
      pre-prebuild-cmd:
        description: "command that will be run before and in the same shell as prebuild command"
        type: string
        default: ""
    executor: << parameters.runner >>
    steps:
      - checkout
      - steps: << parameters.setup >>
      - run:
          name: Setup no postinstall
          command: touch .no-postinstall
      - run:
          name: Install modules
          command: npm ci
      - run:
          name: Build prebuilt binaries
          command: |
            << parameters.pre-prebuild-cmd >>
            npm run-script prebuild_all
      - store_artifacts:
          path: ./prebuilds
      - persist_to_workspace:
          root: prebuilds
          paths:
            - .

  release:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - attach_workspace:
          at: ./prebuilds
      - run:
          name: Setup no postinstall
          command: touch .no-postinstall
      - run:
          name: Install modules
          command: npm ci
      - run:
          name: Upload prebuilt releases
          command: npm run-script prebuild_upload_all -- ${GITHUB_ACCESS_TOKEN}
